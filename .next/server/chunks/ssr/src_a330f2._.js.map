{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/ilakopendoh/Desktop/portfolio/src/i18n/request.ts"],"sourcesContent":["// import { getRequestConfig } from \"next-intl/server\";\n// import { cookies } from \"next/headers\";\n\n// export default getRequestConfig(async () => {\n//   const cookieStore = cookies();\n//   const locale =  (await cookieStore).get(\"locale\")?.value || \"ru\"; // Берем язык из cookies или ставим \"en\" по умолчанию\n\n//   return {\n//     locale,\n//     messages: (await import(`../../public/locales/${locale}.json`)).default,\n//   };\n// });\n\nimport { getRequestConfig } from \"next-intl/server\";\nimport { routing } from \"./routing\";\n\nexport default getRequestConfig(async ({ requestLocale }) => {\n  // This typically corresponds to the `[locale]` segment\n  let locale = await requestLocale;\n\n  // Ensure that a valid locale is used\n  if (!locale || !routing.locales.includes(locale as any)) {\n    locale = routing.defaultLocale;\n  }\n\n  return {\n    locale,\n    messages: (await import(`../../public/locales/${locale}.json`)).default,\n  };\n});\n"],"names":[],"mappings":"AAAA,uDAAuD;AACvD,0CAA0C;AAE1C,gDAAgD;AAChD,mCAAmC;AACnC,4HAA4H;AAE5H,aAAa;AACb,cAAc;AACd,+EAA+E;AAC/E,OAAO;AACP,MAAM;;;;AAGN;AADA;;;uCAGe,CAAA,GAAA,2OAAA,CAAA,mBAAgB,AAAD,EAAE,OAAO,EAAE,aAAa,EAAE;IACtD,uDAAuD;IACvD,IAAI,SAAS,MAAM;IAEnB,qCAAqC;IACrC,IAAI,CAAC,UAAU,CAAC,sHAAA,CAAA,UAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAgB;QACvD,SAAS,sHAAA,CAAA,UAAO,CAAC,aAAa;IAChC;IAEA,OAAO;QACL;QACA,UAAU,CAAC;;;;;;;;;kBAAa,CAAC,qBAAqB,EAAE,OAAO,KAAK,CAAC,CAAC,EAAE,OAAO;IACzE;AACF"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["file:///Users/ilakopendoh/Desktop/portfolio/src/i18n/routing.ts"],"sourcesContent":["import {defineRouting} from 'next-intl/routing';\nimport {createNavigation} from 'next-intl/navigation';\n \nexport const routing = defineRouting({\n  // A list of all locales that are supported\n  locales: ['en', 'ru'],\n \n  // Used when no locale matches\n  defaultLocale: 'en'\n});\n \n// Lightweight wrappers around Next.js' navigation APIs\n// that will consider the routing configuration\nexport const {Link, redirect, usePathname, useRouter, getPathname} =\n  createNavigation(routing);"],"names":[],"mappings":";;;;;;;;AAAA;AACA;;;AAEO,MAAM,UAAU,CAAA,GAAA,+IAAA,CAAA,gBAAa,AAAD,EAAE;IACnC,2CAA2C;IAC3C,SAAS;QAAC;QAAM;KAAK;IAErB,8BAA8B;IAC9B,eAAe;AACjB;AAIO,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAC,GAChE,CAAA,GAAA,+OAAA,CAAA,mBAAgB,AAAD,EAAE"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///Users/ilakopendoh/Desktop/portfolio/src/app/%5Blocale%5D/layout.tsx"],"sourcesContent":["\n// import { NextIntlClientProvider } from \"next-intl\";\n// import { getLocale, getMessages } from \"next-intl/server\";\n// import type { Metadata } from \"next\";\n// import \"./styles/globals.css\";\n// import sen from \"../../public/fonts/sen\";\n// import \"./styles/reset.css\";\n\n// export const metadata: Metadata = {\n//   title: \"LictuaPortfolio\",\n//   description: \"website represents porftolio with works, experiance and main stack \",\n// };\n\n// export default async function RootLayout({ children }: { children: React.ReactNode }) {\n//   const locale = await getLocale();\n\n//   const messages = await getMessages();\n\n//   return (\n//     <html lang={locale}>\n//       <body className={`${sen.className}`}>\n//         <NextIntlClientProvider messages={messages}>{children}</NextIntlClientProvider>\n//       </body>\n//     </html>\n//   );\n// }\n\n\n\nimport {NextIntlClientProvider} from 'next-intl';\nimport {getMessages} from 'next-intl/server';\nimport {notFound} from 'next/navigation';\nimport {routing} from '@/i18n/routing';\n \nexport default async function LocaleLayout({\n  children,\n  params: {locale}\n}: {\n  children: React.ReactNode;\n  params: {locale: string};\n}) {\n  // Ensure that the incoming `locale` is valid\n  if (!routing.locales.includes(locale as any)) {\n    notFound();\n  }\n \n  // Providing all messages to the client\n  // side is the easiest way to get started\n  const messages = await getMessages();\n \n  \n  return (\n    <html lang={locale}>\n      <body>\n        <NextIntlClientProvider messages={messages}>\n          {children}\n        </NextIntlClientProvider>\n      </body>\n    </html>\n  );\n}"],"names":[],"mappings":"AACA,sDAAsD;AACtD,6DAA6D;AAC7D,wCAAwC;AACxC,iCAAiC;AACjC,4CAA4C;AAC5C,+BAA+B;AAE/B,sCAAsC;AACtC,8BAA8B;AAC9B,wFAAwF;AACxF,KAAK;AAEL,0FAA0F;AAC1F,sCAAsC;AAEtC,0CAA0C;AAE1C,aAAa;AACb,2BAA2B;AAC3B,8CAA8C;AAC9C,0FAA0F;AAC1F,gBAAgB;AAChB,cAAc;AACd,OAAO;AACP,IAAI;;;;;AAMJ;AACA;AADA;AADA;AADA;;;;;;AAKe,eAAe,aAAa,EACzC,QAAQ,EACR,QAAQ,EAAC,MAAM,EAAC,EAIjB;IACC,6CAA6C;IAC7C,IAAI,CAAC,sHAAA,CAAA,UAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAgB;QAC5C,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IACT;IAEA,uCAAuC;IACvC,yCAAyC;IACzC,MAAM,WAAW,MAAM,CAAA,GAAA,iOAAA,CAAA,cAAW,AAAD;IAGjC,qBACE,8OAAC;QAAK,MAAM;kBACV,cAAA,8OAAC;sBACC,cAAA,8OAAC,mPAAA,CAAA,yBAAsB;gBAAC,UAAU;0BAC/B;;;;;;;;;;;;;;;;AAKX"}},
    {"offset": {"line": 144, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}